import glob
import os

from lib.lang.registry import LanguageSettings, register_language


@register_language(name="java", extension="java")
class JavaSettings(LanguageSettings):
    LIB_DIR = os.path.join("lib", "java")
    LIB_SRC = glob.glob(os.path.join(LIB_DIR, "**", "*.java"))
    LIB_CLS = glob.glob(os.path.join(LIB_DIR, "**", "*.class"))

    def __init__(self, file):
        self._jar_file = file.replace(".java", ".jar")
        super(JavaSettings, self).__init__(file)

    def compile(self):
        yield from self._purge_class_files()
        yield f"javac -sourcepath {self.LIB_DIR} -d {self.LIB_DIR} {' '.join(self.LIB_SRC)}"
        yield f"javac -sourcepath {self._base_dir} -classpath {self.LIB_DIR} -d {self._base_dir} {self.file}"
        yield from self._build_jar()
        yield from self._purge_class_files()

    def solve(self):
        return f"java -jar {self._jar_file}"

    def _purge_class_files(self):
        class_files = glob.glob(os.path.join(self._base_dir, "*.class"))
        if class_files:
            yield f"rm {' '.join(class_files)}"

    def _build_jar(self):
        class_files = glob.glob(os.path.join(self._base_dir, "*.class"))
        if not class_files:
            raise Exception("No class files generated by javac")
        jar_classes = self._jar_class_arguments(
            self._base_dir, class_files
        ) + self._jar_class_arguments(self.LIB_DIR, self.LIB_CLS)
        yield f"jar cfe {self._jar_file} Main {' '.join(jar_classes)}"

    @staticmethod
    def _jar_class_arguments(base_dir, class_files):
        args = []
        for file in class_files:
            args.append(f"-C {base_dir} {file[len(base_dir) + 1:]}")
        return args
