#!/usr/bin/env python

import argparse
import glob
import os
import signal
import sys

from datetime import datetime
from multiprocessing import Pipe, Process

from lib.languages import all_languages
from lib.solver import Solver
from lib.solver_event import SolverEvent
from lib.terminal_display import TerminalDisplay


class ExitCode(object):
    INVALID_ARGS = 2
    SIGNAL_BASE = 128
    SIGINT = SIGNAL_BASE + 2
    UNKNOWN_ERROR = 255

    @classmethod
    def for_signal(cls, signal):
        return cls.SIGNAL_BASE + signal


current_day = datetime.utcnow()
parser = argparse.ArgumentParser(
    description=(
        "Run Advent of Code solution for a given year/day in the chosen language"
    )
)

default_year = os.environ.get("YEAR", str(current_day.year))
parser.add_argument(
    "-y",
    "--year",
    help=f"competition year (default: {default_year})",
    default=default_year,
)

default_day = os.environ.get("DAY", str(current_day.day))
parser.add_argument(
    "-d",
    "--day",
    help=f"competition day (default: {default_day})",
    default=default_day,
)

language_helper = f"available languages: {', '.join(all_languages())}"
parser.add_argument(
    "-l",
    "--language",
    nargs="+",
    help=f"programming language of the solution to run ({language_helper})",
)
parser.add_argument(
    "--all", help=f"run all challenge days in all languages", action="store_true"
)
parser.add_argument(
    "--save", help=f"save the programs output to output.txt", action="store_true"
)


def validate_args(args):
    if args.language:
        unknown = list(set(args.language) - set(all_languages()))
        if unknown:
            raise ValueError(
                f"Unrecognized language(s): {', '.join(unknown)} (available: {', '.join(all_languages())})"
            )
    if args.save:
        if args.all:
            raise ValueError("Cannot use `--save` with `--all`")
        elif Solver.has_solution(args.year, args.day):
            raise ValueError(
                f"Cannot save results when output already saved, please delete existing file"
            )


class Context(object):
    def __init__(self):
        self.conns = []
        self.procs = []

    def add_conn(self, conn):
        self.conns.append(conn)

    def add_proc(self, proc, join=False):
        proc.start()
        if join:
            proc.join()
        else:
            self.procs.append(proc)

    def shutdown(self, signal=None, error=None):
        print("SHUTDOWN CALLED")
        while self.conns:
            conn = self.conns.pop()
            conn.send(SolverEvent.TERMINATE)
            args = {}
            if signal:
                args["signal"] = signal
            if error:
                args["error"] = error
            conn.send(args)
            conn.close()
        while self.procs:
            proc = self.procs.pop()
            proc.join()


class ContextManager(object):
    _context = Context()

    @classmethod
    def add_conn(cls, conn):
        cls._context.add_conn(conn)

    @classmethod
    def add_proc(cls, proc, join=False):
        cls._context.add_proc(proc, join)

    @classmethod
    def shutdown(cls, signal=None, error=None):
        cls._context.shutdown(signal, error)


args = parser.parse_args()
display_conn, solver_conn = Pipe(True)
ContextManager.add_conn(display_conn)
ContextManager.add_conn(solver_conn)

display = TerminalDisplay(display_conn)
display_proc = Process(target=display, name="AoC-display")
ContextManager.add_proc(display_proc)


def sig_handler(signal, _frame):
    print(f"HANDLING SIGNAL {signal}")
    ContextManager.shutdown(signal=signal)
    print("SHUTTING DOWN")
    sys.exit(ExitCode.for_signal(signal))


signal.signal(signal.SIGQUIT, sig_handler)

try:
    validate_args(args)
    if args.all:
        years = glob.glob("2*")
        years.sort()
        for year in years:
            days = glob.glob(f"{year}/[012]?")
            days.sort()
            for day in days:
                solver = Solver(solver_conn, year, day.split("/")[-1])
                ContextManager.add_proc(
                    Process(target=solver, args=(args.language,), name="AoC-solver"),
                    True,
                )
    else:
        solver = Solver(solver_conn, args.year, args.day, args.save)
        ContextManager.add_proc(
            Process(target=solver, args=(args.language,), name="AoC-solver"), True
        )
    ContextManager.shutdown()
except ValueError as e:
    ContextManager.shutdown(error=e)
    sys.exit(ExitCode.INVALID_ARGS)
except KeyboardInterrupt as e:
    ContextManager.shutdown()
    sys.exit(ExitCode.SIGINT)
except Exception as e:
    ContextManager.shutdown(error=e)
    sys.exit(ExitCode.UNKNOWN_ERROR)
